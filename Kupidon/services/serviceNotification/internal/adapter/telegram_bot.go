package adapter

import (
	"bytes"
	"errors"
	"fmt"
	"log"
	"serviceNotification/internal/entity"
	"serviceNotification/internal/utilites"

	"gopkg.in/telebot.v4"
)

type UserClient interface {
	GetUserByID(userID int64) (*entity.User, error)
}

type TelegramBot struct {
	b           *telebot.Bot
	uc          UserClient
	likeTracker map[int64]int64 //–•—Ä–∞–Ω–∏—Ç, –∫—Ç–æ –∫–æ–≥–æ –ª–∞–π–∫–Ω—É–ª (userID -> likerID)
}

type Bothandle struct {
	t TelegramBot
}

func NewBothandle(t TelegramBot) *Bothandle {
	return &Bothandle{t: t}
}

var likes int

func NewTelegramBot(token string, userClient UserClient) (*TelegramBot, error) {
	botAPI, err := telebot.NewBot(telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Printf("Error creating Telegram bot: %v", err)
		return nil, err
	}
	log.Printf("Authorized on account %s", botAPI.Me.FirstName)

	bot := &TelegramBot{
		b:           botAPI,
		uc:          userClient,
		likeTracker: make(map[int64]int64),
	}

	return bot, nil
}

func (bot *TelegramBot) SendMessage(msg entity.Message) error {
	if msg.FromUserID == 0 || msg.ToUserID == 0 || msg.Text == "" {
		return errors.New("–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
	}
	ToRecipient := &telebot.User{ID: msg.ToUserID}

	bot.likeTracker[msg.ToUserID] = msg.FromUserID

	profileKeys := &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnShowProfile := profileKeys.Text("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
	profileKeys.Reply(profileKeys.Row(btnShowProfile))

	switch msg.Text {
	case "like":
		_, err := bot.b.Send(ToRecipient, "–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏! –ù–∞–∂–º–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É?", profileKeys)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return err

		}
	}

	return nil
}

func (bot *Bothandle) BotStart() {
	bot.t.b.Handle(telebot.OnText, func(ctx telebot.Context) error {
		if likes == 1 {
			if ctx.Text() == "‚ù§" {
				chat, err := bot.t.b.ChatByID(bot.t.likeTracker[ctx.Sender().ID])
				if err != nil {
					return ctx.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞")
				}
				msg := fmt.Sprintf("–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è: [–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!] (tg://user?id=%o)", ctx.Sender().ID)
				profileKeys := [][]telebot.ReplyButton{
					{{Text: "1"}, {Text: "2"}, {Text: "3"}},
				}
				bot.t.b.Send(chat, msg, &telebot.ReplyMarkup{ReplyKeyboard: profileKeys, ResizeKeyboard: true})

			}
			if ctx.Text() == "üëé" {
				profileKeys := [][]telebot.ReplyButton{
					{{Text: "1"}, {Text: "2"}, {Text: "3"}},
				}
				return ctx.Send("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ. \n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞ üì±.\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", &telebot.ReplyMarkup{ReplyKeyboard: profileKeys, ResizeKeyboard: true})
			}
		}
		if ctx.Text() == "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É" {
			userID := ctx.Sender().ID
			likerID, exists := bot.t.likeTracker[userID]
			if !exists {
				profileKeys := [][]telebot.ReplyButton{
					{{Text: "1"}, {Text: "2"}, {Text: "3"}},
				}
				ctx.Send("–ù–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞")
				return ctx.Send("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ. \n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞ üì±.\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", &telebot.ReplyMarkup{ReplyKeyboard: profileKeys, ResizeKeyboard: true})
			}

			user, err := bot.t.uc.GetUserByID(likerID)
			if err != nil {
				ctx.Send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã.")
				profileKeys := [][]telebot.ReplyButton{
					{{Text: "1"}, {Text: "2"}, {Text: "3"}},
				}
				ctx.Send("–ù–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞")
				return ctx.Send("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ. \n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞ üì±.\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", &telebot.ReplyMarkup{ReplyKeyboard: profileKeys, ResizeKeyboard: true})
			}

			imageBytes, err := utilites.DownloadImageAsBytes(user.Photo)
			if err != nil {
				log.Println(err)
				ctx.Send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–¥")
				profileKeys := [][]telebot.ReplyButton{
					{{Text: "1"}, {Text: "2"}, {Text: "3"}},
				}
				ctx.Send("–ù–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞")
				return ctx.Send("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ. \n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞ üì±.\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", &telebot.ReplyMarkup{ReplyKeyboard: profileKeys, ResizeKeyboard: true})
			}

			Answer := &telebot.Photo{
				File:    telebot.FromReader(bytes.NewReader(imageBytes)),
				Caption: fmt.Sprintf("%s, %d, %s - %s", user.Name, user.Age, user.City, user.Description),
			}

			likes = 1
			key := [][]telebot.ReplyButton{
				{{Text: "‚ù§"}, {Text: "üëé"}},
			}
			return ctx.Send(Answer, &telebot.ReplyMarkup{ReplyKeyboard: key, ResizeKeyboard: true})
		}
		return nil
	})

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	bot.t.b.Start()
}
